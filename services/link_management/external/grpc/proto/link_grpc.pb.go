// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: services/link_management/external/grpc/proto/link.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkManagementServiceClient is the client API for LinkManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkManagementServiceClient interface {
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*LinkReply, error)
}

type linkManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkManagementServiceClient(cc grpc.ClientConnInterface) LinkManagementServiceClient {
	return &linkManagementServiceClient{cc}
}

func (c *linkManagementServiceClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*LinkReply, error) {
	out := new(LinkReply)
	err := c.cc.Invoke(ctx, "/proto.LinkManagementService/CreateLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkManagementServiceServer is the server API for LinkManagementService service.
// All implementations must embed UnimplementedLinkManagementServiceServer
// for forward compatibility
type LinkManagementServiceServer interface {
	CreateLink(context.Context, *CreateLinkRequest) (*LinkReply, error)
	mustEmbedUnimplementedLinkManagementServiceServer()
}

// UnimplementedLinkManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinkManagementServiceServer struct {
}

func (UnimplementedLinkManagementServiceServer) CreateLink(context.Context, *CreateLinkRequest) (*LinkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedLinkManagementServiceServer) mustEmbedUnimplementedLinkManagementServiceServer() {}

// UnsafeLinkManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkManagementServiceServer will
// result in compilation errors.
type UnsafeLinkManagementServiceServer interface {
	mustEmbedUnimplementedLinkManagementServiceServer()
}

func RegisterLinkManagementServiceServer(s grpc.ServiceRegistrar, srv LinkManagementServiceServer) {
	s.RegisterService(&LinkManagementService_ServiceDesc, srv)
}

func _LinkManagementService_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkManagementServiceServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LinkManagementService/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkManagementServiceServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkManagementService_ServiceDesc is the grpc.ServiceDesc for LinkManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LinkManagementService",
	HandlerType: (*LinkManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLink",
			Handler:    _LinkManagementService_CreateLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/link_management/external/grpc/proto/link.proto",
}
